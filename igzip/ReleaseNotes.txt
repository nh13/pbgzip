OVERVIEW

  This release contains the source code needed to build an optimized
  compression library, compatible with GZIP/DEFLATE. It can be built
  in a number of different configurations.

  Two major versions can be built: igzip0c and igzip1c. The former is
  faster, while the latter is slightly slower but gives a slightly
  more compressed output. Both of these versions are significantly
  faster than the standard "gzip -1", but they result in a bit less
  compression.

API:

  The API is the same for all of the libraries. It is defined by:
 
  struct LZ_Stream2 {
    UINT8 *next_in;   // Next input byte
    UINT32 avail_in;  // number of bytes available at next_in
    UINT32 total_in;  // total number of bytes read so far
 
    UINT8 *next_out;  // Next output byte
    UINT32 avail_out; // number of bytes available at next_out
    UINT32 total_out; // total number of bytes written so far
    UINT32 end_of_stream; // non-zero if this is the last input buffer
 
    LZ_State2 internal_state;
  };
 
  void init_stream(LZ_Stream2 *stream);
  void fast_lz(LZ_Stream2 *stream);
 
 
  The basic paradigm is that next_in points to an input buffer and
  avail_in indicates the length of that buffer. Similarly next_out
  points to an empty output buffer, and avail_out indicates the size
  of that buffer.

  The fields total_in and total_out start at 0 and are updated by
  fast_lz(). These reflect the total number of bytes read or written
  so far, in case the calling application is interested.
 
  The function init_stream() statically initializes the stream data
  structure and in particular the internal state.
 
  The call to fast_lz() will take data from the input buffer (updating
  next_in and avail_in) and write a compressed stream to the output
  buffer (updating next_out and avail_out). The function returns when
  either avail_in or avail_out goes to zero (i.e. when it runs out of
  input data or when the output buffer fills up, whichever comes
  first).
 
  When the last input buffer is passed in, the end_of_stream flag
  should be set. This will cause the routine to complete the bit
  stream when it gets to the end of that input buffer, as long as the
  output buffer is big enough.
 
  A simple sample application would be:
 
    LZ_Stream2 stream;
    UINT8 inbuf[LEN_IN], outbuf[LEN_OUT];
 
    init_stream(&stream);
    stream.end_of_stream = 0;
 
    do {
        stream.avail_in = (UINT32) fread(inbuf, 1, LEN_IN, in);
        stream.end_of_stream = feof(in);
        stream.next_in = inbuf;
 
        do {
            stream.avail_out = LEN_OUT;
            stream.next_out = outbuf;
 
            fast_lz(&stream);
 
            fwrite(outbuf, 1, LEN_OUT - stream.avail_out, out);
        } while (stream.avail_out == 0);
 
        assert(stream.avail_in == 0);
    } while (! stream.end_of_stream);
 
  The zlib FLUSH_SYNC operation is not currently supported.
 
VERSIONS

  Which version gets built is determined by settings in the file
  options.inc. This defines a number of symbols in YASM syntax. A perl
  script is used to convert this file into options.h, for use by the C
  code. You should not manually edit options.h. (If perl is not
  available, you can manually edit options.h, but then you must
  manually ensure that options.h and options.inc are in sync.)

  As described above, two major versions are 0c and 1c. This is
  selected by editting the options.inc file to say either of:
    %define MAJOR_VERSION IGZIP0C
  or
    %define MAJOR_VERSION IGZIP1C

  (In this release, versions IGZIP0 and IGZIP1 are not supported.)

  For either of these versions, one of three Huffman tables can be
  selected. The default table is designed to be used with most
  files. There are also two other tables, which have been optimized
  for use with Genomics applications, in particular for their SAM and
  BAM formatted files. To select one of these tables, uncomment of the
  lines (by removing the leading semi-colon):
    ;%define GENOME_SAM
    ;%define GENOME_BAM
  If both lines are commented out (as shown above), the default tables
  are used. You should not uncomment out both lines at the same time.

  By default, igzip produces a GZIP formatted file (RFC 1952). If the
  line:
    ;%define ONLY_DEFLATE
  is uncommented, then it will produce a DEFLATE formatted output,
  i.e. without the GZIP headers.

  The supported (i.e. tested) versions in this release are:
  IGZIP0C
  IGZIP0C, GENOME_SAM
  IGZIP0C, GENOME_BAM
  IGZIP0C,             ONLY_DEFLATE
  IGZIP0C, GENOME_SAM, ONLY_DEFLATE
  IGZIP0C, GENOME_BAM, ONLY_DEFLATE
  IGZIP1C
  IGZIP1C, GENOME_SAM
  IGZIP1C, GENOME_BAM
  IGZIP1C,             ONLY_DEFLATE
  IGZIP1C, GENOME_SAM, ONLY_DEFLATE
  IGZIP1C, GENOME_BAM, ONLY_DEFLATE
